import controller from"./controller.min.js";class Employee{static data={count:0,list:[]};_id;_firstName;_lastName;_email;_jobTitle;_department;_location;constructor({id:t,firstName:e,lastName:a,email:i,jobTitle:n,department:s,location:o}){this.#t(t),this.#e(e),this.#a(a),this.#i(i),this.#n(n),this.#s(s),this.#o(o),Employee.data.count++,Employee.data.list.push(this)}get id(){return this._id}#t(t){if(t=Number(t),isNaN(t))throw new Error("Department ID must be of type number");this._id=t}get firstName(){return this._firstName}#e(t){if("string"!=typeof t)throw new Error("Firstname must be of type string.");this._firstName=t}get lastName(){return this._lastName}#a(t){if("string"!=typeof t)throw new Error("Lastname must be of type string.");this._lastName=t}get email(){return this._email}#i(t){if("string"!=typeof t)throw new Error("Email must be of type string.");this._email=t}get jobTitle(){return this._jobTitle}#n(t){if("string"!=typeof t)throw new Error("Job Title must be of type string.");this._jobTitle=t}get department(){return this._department}#s(t){if(!(t instanceof Department))throw new Error("You must set the department as an instance of Department");this._department=t}get location(){return this._department}#o(t){if(!(t instanceof Location))throw new Error("You must set the location as an instance of Location");this._location=t}static getById(t){return Employee.data.list.filter((e=>t===e.id))[0]}static async clear(){Employee.data.count=0,Employee.data.list=[]}static async add(t,e){await controller.addEmployee(t),e&&e()}static async edit(t,e){await controller.editEmployee(t),e&&e()}static async delete(t,e){await controller.deleteEmployee(t),e&&e()}async add(t,e){await Employee.add(t,e)}async edit(t,e){await Employee.edit(t,e)}async delete(t,e){await Employee.delete(t,e)}}class Department{static data={count:0,list:[]};_id;_name;_location;constructor({id:t,name:e,location:a}){this.#t(t),this.#r(e),this.#o(a),Department.data.count++,Department.data.list.push(this)}get id(){return this._id}#t(t){if(t=Number(t),isNaN(t))throw new Error("Department ID must be of type number");this._id=t}get name(){return this._name}#r(t){if("string"!=typeof t)throw new Error("Department name must be of type string.");this._name=t}get location(){return this._location}#o(t){if(!(t instanceof Location))throw new Error("You must set the location as an instance of Location");this._location=t}hasEmployees(){return Employee.data.list.findIndex((t=>t.department===this.name||t.department.id===this.id))>=0}static getById(t){return Department.data.list.filter((e=>t===e.id))[0]}static getByName(t){return Department.data.list.filter((e=>t===e.name))[0]}static clear(){Department.data.count=0,Department.data.list=[]}static async add(t,e){await controller.addDepartment(t),e&&e()}static async edit(t,e){await controller.editDepartment(t),e&&e()}static async delete(t,e){await controller.deleteDepartment(t),e&&e()}async add(t,e){await Department.add(t,e)}async edit(t,e){await Department.edit(t,e)}async delete(t,e){await Department.delete(t,e)}}class Location{static data={count:0,list:[]};_id;_name;constructor({id:t,name:e}){this.#t(t),this.#r(e),Location.data.count++,Location.data.list.push(this)}get id(){return this._id}#t(t){if(t=Number(t),isNaN(t))throw new Error("Location ID must be of type number");this._id=t}get name(){return this._name}#r(t){if("string"!=typeof t)throw new Error("Location name must be of type string.");this._name=t}hasDepartments(){return Department.data.list.findIndex((t=>t.location.id===this.id||t.location===this.name))>=0}static getById(t){return Location.data.list.filter((e=>t===e.id))[0]}static getByName(t){return Location.data.list.filter((e=>t===e.name))[0]}static clear(){Location.data.count=0,Location.data.list=[]}static async add(t,e){await controller.addLocation(t),e&&e()}static async edit(t,e){await controller.editLocation(t),e&&e()}static async delete(t,e){await controller.deleteLocation(t),e&&e()}async add(t,e){await Location.add(t,e)}async edit(t,e){await Location.edit(t,e)}async delete(t,e){await Location.delete(t,e)}}export{Employee,Department,Location};
